apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion


    defaultConfig {
        applicationId "com.cs.architecture"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":common")

    def lifecycle_version = "2.0.0"
//     ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"


    //协程
    //The built-in coroutine scopes described in this topic are contained in the
    // KTX extensions for each corresponding Architecture component.
    // Be sure to add the appropriate dependencies when using these scopes

//    For ViewModelScope, use androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0-beta01 or higher.
//    For LifecycleScope, use androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01 or higher.
//    For liveData, use androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01 or higher.

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha02"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha02"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha02"

//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:x.x.x"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:x.x.x"


    /**
     *  module里如果使用了kapt插件，那在加载注解生成器的时候，
     *  必须要使用kapt '***'。使用annotationProcessor '***'是生成不了代码的
     */
    //room
    def room_version = "2.2.0-alpha01"
    implementation "androidx.room:room-ktx:$room_version"
//    implementation "androidx.room:room-runtime:$room_version"

    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$room_version"


//    // optional - Kotlin Extensions and Coroutines support for Room
//    implementation "androidx.room:room-ktx:$room_version"
//
//    // optional - RxJava support for Room
//    implementation "androidx.room:room-rxjava2:$room_version"
//
//    // optional - Guava support for Room, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:$room_version"
}
